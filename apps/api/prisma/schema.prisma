// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  phoneNumber      String           @unique
  email            String           @unique
  password         String
  role             Role?
  nameOrganization String?
  referralCode     String?          @unique
  cuponDiscount    CouponDiscount?
  points   ReferralPoints? 
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isDeleted        Boolean          @default(false)
  Transaction      Transaction[]
  UserVoucher      UserVoucher[]
  UserReward       UserReward[]
  Voucher          Voucher[]
  Event            Event[]
  CouponUser       CouponUser[]
}

model Role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model CouponDiscount {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id])
  couponCode         String   @unique
  isUsed             Boolean  @default(false)
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime
}

model ReferralPoints {
  id             Int      @id @default(autoincrement())
  userId Int      @unique
  user User @relation(fields: [userId],references: [id])
  pointEarned    Int  @default(0)
  dateEarned     DateTime @default(now())
  expiresOn      DateTime
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Event {
  id            Int           @id @default(autoincrement())
  userId Int @unique
  title         String
  price         Float
  dateTime      DateTime
  location      String
  description   String
  availableSeat Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  category      String
  banner        String
  booked        Int      @default(0)

  Transaction Transaction[]
  Discount    Discount[]
  Voucher     Voucher[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      Int?

  @@map("events")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  userId        Int
  eventId       Int
  statusId      Int      @default(1)
  qty           Int
  paymentProof  String?
  total         Int
  pointsUsed    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user                   User                     @relation(fields: [userId], references: [id])
  event                  Event                    @relation(fields: [eventId], references: [id])
  status                 Status                   @relation(fields: [statusId], references: [id])
  TransactionDiscount    TransactionDiscount[]
  TransactionUservoucher TransactionUservoucher[]
  TransactionUserReward  TransactionUserReward[]
}

model Status {
  id          Int           @id @default(autoincrement())
  title       String
  Transaction Transaction[]
}

model TransactionDiscount {
  id            Int      @id @default(autoincrement())
  discountId    Int
  transactionId Int
  createdAt     DateTime @default(now())
  updaetdAt     DateTime @updatedAt

  discount    Discount    @relation(fields: [discountId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model TransactionUservoucher {
  id            Int      @id @default(autoincrement())
  userVoucherId Int
  transactionId Int
  createdAt     DateTime @default(now())
  updaetdAt     DateTime @updatedAt

  userVoucher UserVoucher @relation(fields: [userVoucherId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  voucherId Int
  userId    Int
  isUsed    Boolean
  createdAt DateTime @default(now())
  updaetdAt DateTime @updatedAt

  voucher                Voucher                 @relation(fields: [voucherId], references: [id])
  user                   User                     @relation(fields: [userId], references: [id])
  TransactionUservoucher TransactionUservoucher[]
  ClaimVoucher           ClaimVoucher[]
}

model ClaimVoucher {
  id              Int      @id @default(autoincrement())
  transactionDate DateTime
  myVoucherId     Int

  // Relationships
  myVoucher UserVoucher @relation(fields: [myVoucherId], references: [id])
}

model Discount {
  id         Int      @id @default(autoincrement())
  percentage Int
  dateTime   DateTime
  eventId    Int
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updaetdAt  DateTime @updatedAt

  event               Event                 @relation(fields: [eventId], references: [id])
  TransactionDiscount TransactionDiscount[]
}

model TransactionUserReward {
  id            Int      @id @default(autoincrement())
  userRewardId  Int
  transactionId Int
  createdAt     DateTime @default(now())
  updaetdAt     DateTime @updatedAt

  userReward  UserReward  @relation(fields: [userRewardId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model Reward {
  id          Int          @id @default(autoincrement())
  title       String
  description String       @db.VarChar(225)
  percentage  Int
  max_nominal Int
  dateTime    DateTime
  createdAt   DateTime     @default(now())
  updaetdAt   DateTime     @updatedAt
  UserReward  UserReward[]
}

model UserReward {
  id        Int      @id @default(autoincrement())
  userId    Int
  rewardId  Int
  isUsed    Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())
  updaetdAt DateTime @updatedAt

  user                  User                    @relation(fields: [userId], references: [id])
  reward                Reward                  @relation(fields: [rewardId], references: [id])
  TransactionUserReward TransactionUserReward[]
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  nominal   Int
  limit     Int
  claim     Int      @default(0)
  startDate DateTime
  endDate   DateTime
  eventId   Int
  userId    Int
  createdAt DateTime @default(now())
  updaetdAt DateTime @updatedAt

  event       Event         @relation(fields: [eventId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  UserVoucher UserVoucher[]
}

model CouponUser {
  id                 Int      @id @default(autoincrement())
  userId             Int
  couponCode         String
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime

  User User @relation(fields: [userId], references: [id])
}
