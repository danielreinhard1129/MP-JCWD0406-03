// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  phoneNumber      String           @unique
  email            String           @unique
  password         String
  role             Role?
  nameOrganization String?
  referralCode     String?          @unique
  cuponDiscount    CouponDiscount?
  referrerUser     ReferralPoints[] @relation("Referrer")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isDeleted        Boolean          @default(false)
  Transaction      Transaction[]
}

model Role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model CouponDiscount {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id])
  couponCode         String
  isUsed             Boolean  @default(false)
  discountPersentase Int
  dateReceived       DateTime @default(now())
  expiresOn          DateTime
}

model ReferralPoints {
  id             Int      @id @default(autoincrement())
  referrerUserId Int
  referredUserId Int      @unique
  pointEarned    Int
  isUsed         Boolean  @default(false)
  dateEarned     DateTime @default(now())
  expiresOn      DateTime
  referrerUser   User     @relation("Referrer", fields: [referrerUserId], references: [id])
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model Event {
  id            Int           @id @default(autoincrement())
  title         String
  price         Float
  dateTime      DateTime
  location      String
  description   String
  availableSeat Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  category      String
  banner        String
  booked        Int           @default(0)
  Transaction   Transaction[]

  @@map("events")
}

model Transaction {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid())
  userId       Int
  eventId      Int
  statusId     Int      @default(1)
  qty          Int
  paymentProof String?
  total        Int
  pointsUsed   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  event  Event  @relation(fields: [eventId], references: [id])
  status Status @relation(fields: [statusId], references: [id])
}

model Status {
  id          Int           @id @default(autoincrement())
  title       String
  Transaction Transaction[]
}
